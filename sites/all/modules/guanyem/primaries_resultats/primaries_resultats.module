<?php
/**
 * Implements hook_menu().
 */
function primaries_resultats_menu() {
  $items = array();

  $items['primaries/resultats/%'] = array(
    'page callback' => 'primaries_resultats_main',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function primaries_resultats_theme($existing, $type, $theme, $path) {
  return array(
    'results_head' => array(
      'path' => drupal_get_path('module', 'primaries_resultats'),
      'variables' => array('voting' => array()),
      'template' => 'theme/results_head',
    ),
    'results_council' => array(
      'path' => drupal_get_path('module', 'primaries_resultats'),
      'variables' => array('voting' => array()),
      'template' => 'theme/results_council',
    ),
    'results_measures' => array(
      'path' => drupal_get_path('module', 'primaries_resultats'),
      'variables' => array('voting' => array()),
      'template' => 'theme/results_measures',
    ),
  );
}

/**
* Main control
*/
function primaries_resultats_main($type){
  drupal_add_css(drupal_get_path('module', 'primaries_resultats') . '/css/primaries.resultats.css', array('group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module', 'primaries_resultats') . '/js/primaries.resultats.js', array('group' => JS_THEME));
  $data_path = drupal_get_path('module', 'primaries_resultats') . '/data';
  $img_path = drupal_get_path('module', 'primaries_resultats') . '/images';
  $verify_uri = 'https://vota.barcelonaencomu.cat/#/election/$/public/verify-results';
  $voting = array();
  switch ($type){
    case 'capdellista':
    case 'cabezadelista':
      $voting_id = '101000';
      $data_head = file_get_contents($data_path . '/'.$voting_id.'.results.json');
      if ($data_head !== FALSE){
        $data_head = json_decode($data_head, TRUE);
        $total_votes = $data_head['total_votes'];
        $question = $data_head['questions'][0];
        $blank_votes = $question['totals']['blank_votes'];
        $answers = $question['answers'];
        foreach ($answers as $key => $answer) {
          $total_count = $answer['total_count'];
          $answers[$key]['percent'] = _get_percentage($total_count, $total_votes);
        }
        //---
        $voting = array(
          'verify_uri' => str_replace('$', $voting_id, $verify_uri),
          'answers' => $answers,
          'blank' => array(
            'total_count' => $blank_votes,
            'percent' => _get_percentage($blank_votes, $total_votes),
          ),
          'total_votes' => $total_votes,
        );
        return theme('results_head', array('voting' => $voting));
      }
      break;
    case 'consellers':
    case 'consejeros':
      $voting['map'] = theme('image', array('path' => $img_path . '/mapa_bcn.jpg'));
      $voting['neighbourhoods'] = array();
      for ($i = 0; $i < 10; $i++) {
        // for all neighbourhoods
        $voting_id = '1030'.$i.'0';
        $data_council = file_get_contents($data_path . '/'.$voting_id.'.results.json');
        if ($data_council !== FALSE){
          $data_council = json_decode($data_council, TRUE);
          $total_votes = $data_council['total_votes'];
          $question = $data_council['questions'][0];
          $blank_votes = $question['totals']['blank_votes'];
          $answers = $question['answers'];
          foreach ($answers as $key => $answer) {
            $total_count = $answer['total_count'];
            $answers[$key]['percent'] = _get_percentage($total_count, $total_votes);
          }
          //---
          $voting['neighbourhoods'][] = array(
            'verify_uri' => str_replace('$', $voting_id, $verify_uri),
            'name' => $question['description'],
            'answers' => $answers,
            'blank' => array(
              'total_count' => $blank_votes,
              'percent' => _get_percentage($blank_votes, $total_votes),
            ),
            'total_votes' => $total_votes,
          );
        }
      }
      return theme('results_council', array('voting' => $voting));
      break;
    case 'mesures':
    case 'medidas':
      $voting_id = '102001';
      $data_measures = file_get_contents($data_path . '/'.$voting_id.'.results.json');
      if ($data_measures !== FALSE){
        $data_measures = json_decode($data_measures, TRUE);
        $total_votes = $data_measures['total_votes'];
        $voting['measure_blocks'] = array();
        $max_per_block = array(7, 11, 12, 10);
        foreach ($data_measures['questions'] as $key1 => $question) {
          $block_answers_count = 0;
          $answers = $question['answers'];
          // block answers: calculate total points
          foreach ($answers as $key2 => $answer) {
            $block_answers_count += $answer['total_count'];
          }
          // now we calculate each block answers' percent based on these total points
          foreach ($answers as $key2 => $answer) {
            $answers[$key2]['percent'] = _get_percentage($answer['total_count'], $block_answers_count);
          }
          $blank_votes = $question['totals']['blank_votes'];
          //---
          $voting['measure_blocks'][] = array(
            'name' => $answers[0]['category'],
            'max' => $max_per_block[$key1],
            'answers' => $answers,
            'blank' => array(
              'total_count' => $blank_votes,
              'percent' => _get_percentage($blank_votes, $block_answers_count),
            ),
          );
          $voting['verify_uri'] = str_replace('$', $voting_id, $verify_uri);
          $voting['total_votes'] = $total_votes;
        }

        /*
        // CODE TO MAKE A UNIQUE TABLE OF ALL 40+20 MEASURES
        $all_answers = array();
        $all_answers_count = 0;
        $all_blank_votes = array(
          'total_count' => 0,
        );
        foreach ($data_measures['questions'] as $key1 => $question) {
          // answers: calculate total points
          foreach ($question['answers'] as $key2 => $answer) {
            $all_answers_count += $answer['total_count'];
          }
          // blank votes
          $blank_votes = $question['totals']['blank_votes'];
          $all_blank_votes['total_count'] += $blank_votes;
        }
        // now we calculate each answers' percent based on these total points
        foreach ($data_measures['questions'] as $key1 => $question) {
          foreach ($question['answers'] as $key2 => $answer) {
            $answer['percent'] = _get_percentage($answer['total_count'], $all_answers_count);
            $all_answers[] = $answer;
          }
        }
        // blank votes global percentage
        $all_blank_votes['percent'] = _get_percentage($all_blank_votes['total_count'], $total_votes);
        // sorting the answers
        usort($all_answers, '_compare_measure_winners');
        //---
        $voting = array(
          'verify_uri' => str_replace('$', $voting_id, $verify_uri),
          'max' => 40,
          'answers' => $all_answers,
          'blank' => $all_blank_votes,
          'total_votes' => $total_votes,
        );*/
        return theme('results_measures', array('voting' => $voting));
      }
      break;  
  }
}

function _compare_measure_winners($measure1, $measure2){
    if ($measure1['total_count'] == $measure2['total_count']) {
      return 0;
    }
    return ($measure1['total_count'] > $measure2['total_count'])? -1 : 1;
}

function _get_percentage($value, $total){
  if (is_numeric($value) && is_numeric($total)){
    if ($total > 0){
      $percent = ($value / $total) * 100;
      if ($percent > 0) return number_format($percent, 2, ',', '.') . '%';
      else return 0;
    }else{
      return '0';
    }
  }
  return '-';
}

