<?php

/**
 * Implements hook_form_alter().
 */
function bcnencomu_civicrm_form_alter(&$form, &$form_state, $form_id)
{
  $config = variable_get('civicrm_form_ids');

  if (!is_null($config) && isset($config['contacte_form'])) {
    switch ($form_id) {
      case $config['contacte_form']:
        $form['#submit'][] = 'bcnencomu_civicrm_contacte_submit';
        break;
      case $config['participa_form']:
        $form['#submit'][] = 'bcnencomu_civicrm_participa_submit';
        break;
      case $config['butlletins_form']:
        $form['#submit'][] = 'bcnencomu_civicrm_butlletins_submit';
        break;
    }
  } else {
    $message = 'The settings file is not properly configured, please read the README file in the module.';
    watchdog(basename(__FILE__, '.module'), $message, [], WATCHDOG_ERROR);
  }
}

/**
 * On Contact form submit
 */
function bcnencomu_civicrm_contacte_submit($form, &$form_state)
{
  $submittedData = $form_state['input']['submitted'];

  if (!is_null($submittedData) && !empty($submittedData)) {
    if ($submittedData['accept_legal_terms']['yes'] === 'yes') {
      _send_contact_data($submittedData, $form['#form_id']);
    }
  }
}

/**
 * On Participa form submit
 */
function bcnencomu_civicrm_participa_submit($form, &$form_state)
{
  $submittedData = $form_state['input']['submitted'];

  if (!is_null($submittedData) && !empty($submittedData)) {
    if ($submittedData['accept_legal_terms']['yes'] === 'yes') {
      _send_contact_data($submittedData, $form['#form_id']);
    }
  }
}

/**
 * On Butlletins form submit
 */
function bcnencomu_civicrm_butlletins_submit($form, &$form_state)
{
  $submittedData = $form_state['input']['submitted'];

  if (!is_null($submittedData) && !empty($submittedData)) {
    if ($submittedData['accept_legal_terms']['yes'] === 'yes') {
      _send_contact_data($submittedData, $form['#form_id']);
    }
  }
}

/**
 * Send the data to the CIVI CRM API
 */
function _send_contact_data($data = [], $form_id)
{
  $messages = [];
  $maxDistricts = 10;

  // Check config vars
  $apiConfig = variable_get('civicrm_api');
  $formIdsConfig = variable_get('civicrm_form_ids');

  if (!is_null($apiConfig) && !is_null($formIdsConfig)) {
    $postData = [
      'version' => 3,
      'api_key' => $apiConfig['apikey'],
      'key' => $apiConfig['key'],
      'json' => 1
    ];

    // --- Duplicate contact check request ---
    $checkData = $postData;
    $checkData['entity'] = 'Contact';
    $checkData['action'] = 'duplicatecheck';
    $checkData['dedupe_rule_id'] = 8;
    $checkData['match'] = [
      'contact_type' => 'Individual',
      'first_name' => $data['firstname'],
      'last_name' => $data['lastname'],
      'email' => $data['email'],
    ];

    $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkData));

    if (strtoupper($responseCheck->status_message) === 'OK') {
      $responseCheckData = json_decode($responseCheck->data);
      if ($responseCheckData->is_error == 0) {
        // Check OK

        // flags for contact values that changed
        $agreeReceiveInfo = false;
        $phoneChanged = false;
        $activistaChanged = false;
        $inscritChanged = false;
        $seguidorChanged = false;

        if ($responseCheckData->values) {
          // if response has values, this contact is a duplicate
          $contactId = reset($responseCheckData->values)->id;

          //--- Other entity check requests ---

          // check if phone is new
          if (isset($data['phone'])) {
            $checkPhoneData = $postData;
            $checkPhoneData['entity'] = 'Phone';
            $checkPhoneData['action'] = 'get';
            $checkPhoneData['contact_id'] = $contactId;
            $checkPhoneData['phone'] = $data['phone'];
            $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkPhoneData));
            if (strtoupper($responseCheck->status_message) === 'OK') {
              $responseCheckData = json_decode($responseCheck->data);
              if ($responseCheckData->is_error == 0) {
                if (!$responseCheckData->values) {
                  // if response has no values, this contact did not have this phone yet
                  $phoneChanged = true;
                } else {
                  // this contact already had a phone
                  $oldPhone = reset($responseCheckData->values)->phone;
                  if ($oldPhone != $data['phone']) {
                    // and the new one is different
                    $phoneChanged = true;
                  }
                }
              } else {
                $messages[] = ['text' => $responseCheckData->error_message];
              }
            } else {
              $messages[] = ['text' => 'There was some error checking the existence of the phone.'];
            }
          }

          // check if not yet Activista
          $checkActivistaData = $postData;
          $checkActivistaData['entity'] = 'Membership';
          $checkActivistaData['action'] = 'get';
          $checkActivistaData['contact_id'] = $contactId;
          $checkActivistaData['membership_type_id'] = "Activista";
          $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkActivistaData));
          if (strtoupper($responseCheck->status_message) === 'OK') {
            $responseCheckData = json_decode($responseCheck->data);
            if ($responseCheckData->is_error == 0) {
              if (!$responseCheckData->values) {
                // if response has no values, this contact is not yet Activista
                $activistaChanged = true;
              }
            } else {
              $messages[] = ['text' => $responseCheckData->error_message];
            }
          } else {
            $messages[] = ['text' => 'There was some error checking if contact is Activista.'];
          }

          // check if not yet Inscrit
          $checkInscritData = $postData;
          $checkInscritData['entity'] = 'Membership';
          $checkInscritData['action'] = 'get';
          $checkInscritData['contact_id'] = $contactId;
          $checkInscritData['membership_type_id'] = "Inscrit";
          $checkInscritData['status_id'] = ['IN' => ["Pending", "Current", "Verificat"]];
          $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkInscritData));
          if (strtoupper($responseCheck->status_message) === 'OK') {
            $responseCheckData = json_decode($responseCheck->data);
            if ($responseCheckData->is_error == 0) {
              if (!$responseCheckData->values) {
                // if response has no values, this contact is not yet Inscrit
                $inscritChanged = true;
              }
            } else {
              $messages[] = ['text' => $responseCheckData->error_message];
            }
          } else {
            $messages[] = ['text' => 'There was some error checking if contact is Inscrit.'];
          }

          if ($form_id == $formIdsConfig['contacte_form']) {
            // check if not yet Seguidor
            $checkSeguidorData = $postData;
            $checkSeguidorData['entity'] = 'Membership';
            $checkSeguidorData['action'] = 'get';
            $checkSeguidorData['contact_id'] = $contactId;
            $checkSeguidorData['membership_type_id'] = "Activista";
            $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkSeguidorData));
            if (strtoupper($responseCheck->status_message) === 'OK') {
              $responseCheckData = json_decode($responseCheck->data);
              if ($responseCheckData->is_error == 0) {
                if (!$responseCheckData->values) {
                  // if response has no values, this contact is not yet Seguidor
                  $seguidorChanged = true;
                }
              } else {
                $messages[] = ['text' => $responseCheckData->error_message];
              }
            } else {
              $messages[] = ['text' => 'There was some error checking if contact is Seguidor.'];
            }
          }
        }

        // --- Create contact request ---
        $createData = $postData;
        $createData['entity'] = 'Contact';
        $createData['action'] = 'create';
        $createData['contact_type'] = 'Individual';
        if (isset($contactId)) {
          // contact already existed
          $createData['id'] = $contactId;
        } else {
          // contact did not exist, creating as new
          $createData['first_name'] = $data['firstname'];
          $createData['last_name'] = $data['lastname'];
          $createData['api.Email.create'] = [
            'is_primary' => 1,
            'email' => $data['email'],
          ];
        }

        // checkbox agree_receive_info
        if (isset($data['agree_receive_info'])) {
          if ($data['agree_receive_info']['yes'] === 'yes') {
            $agreeReceiveInfo = true;
          }
        }

        // set preferred language
        $language = 'ca';
        $allowedLanguages = ['ca', 'es'];
        $submitted_url = explode('/', $data['submit_url']);
        if (isset($submitted_url[3])) {
          $language = $submitted_url[3];
          if (in_array($language, $allowedLanguages)) {
            $createData['preferred_language'] = $language . '_ES';
          }
        }

        // set newsletter subscriptions:
        $languageIndex = array_search($language, $allowedLanguages);
        if ($agreeReceiveInfo) {
          if ($languageIndex !== false) {
            $createData['custom_113'] = [$languageIndex+1];
          }
        }
        // checkboxes communication_type
        if (isset($data['communication_type'])) {
          $newsletterOptions = [];
          if ($data['communication_type']['newsletter'] === 'newsletter') {
            if ($languageIndex !== false) {
              $newsletterOptions[] = $languageIndex+1;
            }
          }
          if ($data['communication_type']['press'] === 'press') {
            $newsletterOptions[] = 3;
          }
          if (!empty($newsletterOptions)) {
            $createData['custom_113'] = $newsletterOptions;
          }
        }

        // set district
        if (isset($data['district'])) {
          if (intval($data['district']) && $data['district'] >= 1 && $data['district'] <= $maxDistricts) {
            $createData['custom_111'] = $data['district'];
          }
        }

        // set neighbourhood
        for ($i = 1; $i <= $maxDistricts; $i++) {
          $neighbourhood_key = 'neighbourhood_' . $i;
          if (isset($data[$neighbourhood_key])) {
            $createData['custom_115'] = $data[$neighbourhood_key];
          }
        }

        // if contact is not a duplicate or if its values/entities have changed, create them:
        // participation type memberships
        if (isset($data['participation_type'])) {
          // if Activist option:
          if ($data['participation_type']['activist'] === 'activist') {
            // make Activista membership
            if (!isset($contactId) || $activistaChanged) {
              $createData['api.Membership.create'] = [
                'membership_type_id' => "Activista",
                'status_id' => "Interessat",
                'is_override' => 1
              ];
            }
          }
          // if Activist or Member option:
          if ($data['participation_type']['activist'] === 'activist' || $data['participation_type']['member'] === 'member') {
            // make Inscrit membership
            if (!isset($contactId) || $inscritChanged) {
              // only set Inscrit if not Activista
              if (!$activistaChanged) {
                $createData['api.Membership.create.2'] = [
                  'membership_type_id' => "Inscrit",
                  'status_id' => "Pending",
                  'is_override' => 1
                ];
              }
            }
          }
        }
        if ($form_id != $formIdsConfig['participa_form']) {
          // Seguidor membership
          if ($agreeReceiveInfo) {
            if (!isset($contactId) || $seguidorChanged) {
              // only set Seguidor if not Activista nor Inscrit
              if (!$activistaChanged && !$inscritChanged) {
                $createData['api.Membership.create.3'] = [
                  'membership_type_id' => "Seguidor",
                  'status_id' => "Verificat",
                  'is_override' => 1
                ];
              }
            }
          }
        }
        // phone
        if (isset($data['phone'])) {
          if (!isset($contactId) || $phoneChanged) {
            $createData['api.Phone.create'] = [
              'is_primary' => 1,
              'phone' => $data['phone'],
            ];
          }
        }

        // make the final create request
        $response = drupal_http_request($apiConfig['endpoint'], _get_post_options($createData));

        if (strtoupper($response->status_message) === 'OK') {
          $responseData = json_decode($response->data);
          if ($responseData->is_error == 0) {
            // Contact created correctly
            $contactId = $responseData->id;
            $messages[] = ['text' => 'The Contact was sent and received correctly in the CIVI CRM.', 'severity' => WATCHDOG_INFO];

            // Now we'll assign the activities to this contact:
            $activityData = $postData;
            $activityData['entity'] = 'Activity';
            $activityData['action'] = 'create';
            $activityData['status_id'] = "Completed";
            $activityData['source_contact_id'] = $contactId;
            $activityData['target_contact_id'] = $contactId;

            // Update Communication Preferences
            if ($agreeReceiveInfo) {
              $activityData['activity_type_id'] = "Update_Communication_Preferences";
              $responseActivity = drupal_http_request($apiConfig['endpoint'], _get_post_options($activityData));
              if (strtoupper($responseActivity->status_message) === 'OK') {
                $responseActivityData = json_decode($responseActivity->data);
                if ($responseActivityData->is_error == 0) {
                  $messages[] = ['text' => 'Update_Communication_Preferences activity correctly created.', 'severity' => WATCHDOG_INFO];
                } else {
                  $messages[] = ['text' => $responseActivityData->error_message];
                }
              } else {
                $messages[] = ['text' => 'There was some error creating the Update_Communication_Preferences activity.'];
              }
            }

            // SLA Acceptance
            $activityData['activity_type_id'] = "SLA Acceptance";
            $responseActivity = drupal_http_request($apiConfig['endpoint'], _get_post_options($activityData));
            if (strtoupper($responseActivity->status_message) === 'OK') {
              $responseActivityData = json_decode($responseActivity->data);
              if ($responseActivityData->is_error == 0) {
                $messages[] = ['text' => 'SLA Acceptance activity correctly created.', 'severity' => WATCHDOG_INFO];
              } else {
                $messages[] = ['text' => $responseActivityData->error_message];
              }
            } else {
              $messages[] = ['text' => 'There was some error creating the SLA Acceptance activity.'];
            }
          } else {
            $messages[] = ['text' => $responseData->error_message];
          }
        } else {
          $messages[] = ['text' => 'There was some error in the creation of the contact.'];
        }
      } else {
        $messages[] = ['text' => $responseCheckData->error_message];
      }
    } else {
      $messages[] = ['text' => 'There was some error checking the possible duplicate of the contact.'];
    }
  } else {
    $messages[] = ['text' => 'The settings file is not properly configured, please read the README file in the module.'];
  }

  if (!empty($messages)) {
    foreach ($messages as $message) {
      $severity = is_null($message['severity'])? WATCHDOG_ERROR : $message['severity'];
      watchdog(basename(__FILE__, '.module'), $message['text'], [], $severity);
    }
  }
}

function _get_post_options($data)
{
  return [
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => http_build_query($data),
    'context' => stream_context_create(array(
      'ssl' => array(
        'verify_peer' => FALSE,
        'verify_depth' => 5,
        'allow_self_signed' => TRUE,
        'verify_peer_name' => FALSE,
      )
    ))
  ];
}
