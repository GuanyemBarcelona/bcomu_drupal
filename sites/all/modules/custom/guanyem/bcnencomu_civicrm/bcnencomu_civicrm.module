<?php

/**
 * Implements hook_form_alter().
 */
function bcnencomu_civicrm_form_alter(&$form, &$form_state, $form_id)
{
  $config = variable_get('civicrm_form_ids');

  if (!is_null($config) && isset($config['contacte_form']) 
      && isset($config['participa_form']) 
      && isset($config['butlletins_form']) 
      && isset($config['renda_basica_form']) 
      && isset($config['sorteig_llibres_form'])
      && isset($config['sorteig_llibres_small_form'])
      && isset($config['relats_espai_jove_form'])
      && isset($config['espai_jove_form'])
      && isset($config['cor_rebel_form'])) {
    switch ($form_id) {
      case $config['contacte_form']:
      case $config['participa_form']:
      case $config['butlletins_form']:
      case $config['renda_basica_form']:
      case $config['sorteig_llibres_form']:
      case $config['sorteig_llibres_small_form']:
      case $config['relats_espai_jove_form']:
      case $config['espai_jove_form']:
      case $config['cor_rebel_form']:  
        $form['#submit'][] = 'bcnencomu_civicrm_form_submit';
        break;
    }
  } else {
    $message = 'The settings file is not properly configured, please read the README file in the module.';
    watchdog(basename(__FILE__, '.module'), $message, [], WATCHDOG_ERROR);
  }
}

/**
 * On form submit
 */
function bcnencomu_civicrm_form_submit($form, &$form_state)
{
  $submittedData = $form_state['input']['submitted'];

  if (!is_null($submittedData) && !empty($submittedData)) {
    if ($submittedData['accept_legal_terms']['yes'] === 'yes') {
      _send_contact_data($submittedData, $form['#form_id']);
    }
  }
}

/**
 * Send the data to the CIVI CRM API
 */
function _send_contact_data($data = [], $form_id)
{
  $messages = [];
  $maxDistricts = 10;

  // Check config vars
  $apiConfig = variable_get('civicrm_api');
  $formIdsConfig = variable_get('civicrm_form_ids');

  // is renda basica form (a simpler form)
  $isRendaBasicaForm = ($form_id === $formIdsConfig['renda_basica_form']);

  // is sorteig llibres form
  $isSorteigLlibresForm = ($form_id === $formIdsConfig['sorteig_llibres_form']);
  // is sorteig llibres small form
  $isSorteigLlibresSmallForm = ($form_id === $formIdsConfig['sorteig_llibres_small_form']);
  
  // is concurs relat jove form
  $isConcursRelatJoveForm = ($form_id === $formIdsConfig['relats_espai_jove_form']);

  // is espai jove form
  $isEspaiJoveForm = ($form_id === $formIdsConfig['espai_jove_form']);

  // is cor rebel form
  $isCorRebelForm = ($form_id === $formIdsConfig['cor_rebel_form']);

  if (!is_null($apiConfig) && !is_null($formIdsConfig)) {
    $postData = [
      'version' => 3,
      'api_key' => $apiConfig['apikey'],
      'key' => $apiConfig['key'],
      'json' => 1
    ];

    // --- Duplicate contact check request ---
    $checkData = $postData;
    $checkData['entity'] = 'Contact';
    $checkData['action'] = 'duplicatecheck';
    if (!$isSorteigLlibresForm && !$isConcursRelatJoveForm) {
      $checkData['dedupe_rule_id'] = 4;
      $checkData['match'] = [
        'contact_type' => 'Individual',
        'email' => $data['email'],
      ];
    } else {
      $checkData['dedupe_rule_id'] = 18;
      $checkData['match'] = [
        'contact_type' => 'Individual',
        'email' => $data['email'],
        'custom_13' => $data['document_num'],
      ];
    }

    $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkData));

    if (strtoupper($responseCheck->status_message) === 'OK') {
      $responseCheckData = json_decode($responseCheck->data);
      if ($responseCheckData->is_error == 0) {
        // Check OK

        // old contact data
        $oldContactData = new stdClass();

        // flags for contact values that changed
        $emailChanged = false;
        $phoneChanged = false;
        $activistaChanged = false;
        $inscritChanged = false;
        $seguidorChanged = false;
        $addressChanged = false;

        if ($responseCheckData->values) {
          // if response has values, this contact is a duplicate
          $contactId = reset($responseCheckData->values)->id;

          //--- Other entity check requests ---

          // check some current data
          $checkCurrentData = $postData;
          $checkCurrentData['entity'] = 'Contact';
          $checkCurrentData['action'] = 'get';
          $checkCurrentData['id'] = $contactId;

          // getting extra data from current contact
          $checkCurrentData['return'] = ['custom_113', 'custom_124', 'contact_source']; // Subscriptions, Interests and Source
          if ($isSorteigLlibresForm || $isConcursRelatJoveForm) {
            $checkCurrentData['return'][] = 'birth_date'; // birth date
            $checkCurrentData['return'][] = 'custom_157'; // document type
            $checkCurrentData['return'][] = 'custom_13'; // fiscal ID
          }
          if ($isSorteigLlibresForm) {  
            $checkCurrentData['return'][] = 'custom_158'; // lives on house rent
            $checkCurrentData['return'][] = 'custom_159'; // has children
            $checkCurrentData['return'][] = 'gender_id'; // gender
            $checkCurrentData['return'][] = 'custom_187'; // employment
            $checkCurrentData['return'][] = 'custom_188'; // education
          }

          $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkCurrentData));
          if (strtoupper($responseCheck->status_message) === 'OK') {
            $currentData = json_decode($responseCheck->data);
            if ($currentData->is_error == 0) {
              if (isset($currentData->values->$contactId)) {
                $oldContactData = $currentData->values->$contactId;
              }
            } else {
              $messages[] = ['text' => $currentData->error_message];
            }
          } else {
            $messages[] = ['text' => 'There was some error checking the existence of some current contact data.'];
          }

          if (!$isRendaBasicaForm && !$isSorteigLlibresSmallForm) {
            // check if address of type Altres is new
            if (isset($data['district'])) {
              $checkDistrictData = $postData;
              $checkDistrictData['entity'] = 'Address';
              $checkDistrictData['action'] = 'get';
              $checkDistrictData['contact_id'] = $contactId;
              $checkDistrictData['location_type_id'] = 'Altres';
              $checkDistrictData['return'] = ['custom_118', 'custom_119']; // District, Neighbourhood
              if ($isSorteigLlibresForm || $isConcursRelatJoveForm) {
                $checkDistrictData['return'][] = 'street_address';
                $checkDistrictData['return'][] = 'supplemental_address_1';
                $checkDistrictData['return'][] = 'postal_code';
              }
              $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkDistrictData));
              if (strtoupper($responseCheck->status_message) === 'OK') {
                $responseCheckData = json_decode($responseCheck->data);
                if ($responseCheckData->is_error == 0) {
                  if (!$responseCheckData->values) {
                    // if response has no values, this contact did not have this type of address yet
                    $addressChanged = true;
                  } else {
                    // this contact already had this type of address
                    $oldAddress = reset($responseCheckData->values);
                    // what about the street line 1:
                    if (!isset($oldAddress->street_address)) { // had no data before
                      $addressChanged = true;
                    } else {
                      if ($oldAddress->street_address != $data['street_line']) { // the new one is different
                        $addressChanged = true;
                      }
                    }
                    // what about the street line 2:
                    if (isset($oldAddress->supplemental_address_1)) { // had data before
                      if ($oldAddress->supplemental_address_1 != $data['street_line2']) { // the new one is different
                        $addressChanged = true;
                      }
                    }
                    // what about the district:
                    if (!isset($oldAddress->custom_118)) { // had no data before
                      // but has no district
                      $addressChanged = true;
                    } else {
                      if ($oldAddress->custom_118 != $data['district']) { // the new one is different
                        $addressChanged = true;
                      }
                    }
                    // what about the neighbourhood:
                    if (isset($oldAddress->custom_119)) { // had data before
                      for ($i = 1; $i <= $maxDistricts; $i++) {
                        $neighbourhood_key = 'neighbourhood_' . $i;
                        if (isset($data[$neighbourhood_key])) {
                          if ($oldAddress->custom_119 != $data[$neighbourhood_key]) { // the new one is different
                            $addressChanged = true;
                          }
                        }
                      }
                    }
                  }
                } else {
                  $messages[] = ['text' => $responseCheckData->error_message];
                }
              } else {
                $messages[] = ['text' => 'There was some error checking the existence of the address.'];
              }
            }

            if ($isSorteigLlibresForm || $isConcursRelatJoveForm) {
              // check if email is new
              if (isset($data['email'])) {
                $checkEmailData = $postData;
                $checkEmailData['entity'] = 'Email';
                $checkEmailData['action'] = 'get';
                $checkEmailData['contact_id'] = $contactId;
                $checkEmailData['email'] = _remove_whitespace($data['email']);
                $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkEmailData));
                if (strtoupper($responseCheck->status_message) === 'OK') {
                  $responseCheckData = json_decode($responseCheck->data);
                  if ($responseCheckData->is_error == 0) {
                    if (!$responseCheckData->values) {
                      // if response has no values, this contact did not have an email yet
                      $emailChanged = true;
                    } else {
                      // this contact already had an email
                      $oldEmail = reset($responseCheckData->values)->email;
                      $oldEmail = _remove_whitespace($oldEmail);
                      if ($oldEmail != $checkEmailData['email']) {
                        // and the new one is different
                        $emailChanged = true;
                      }
                    }
                  } else {
                    $messages[] = ['text' => $responseCheckData->error_message];
                  }
                } else {
                  $messages[] = ['text' => 'There was some error checking the existence of the e-mail.'];
                }
              }
            }

            // check if phone is new
            if (isset($data['phone'])) {
              $checkPhoneData = $postData;
              $checkPhoneData['entity'] = 'Phone';
              $checkPhoneData['action'] = 'get';
              $checkPhoneData['contact_id'] = $contactId;
              $checkPhoneData['phone'] = _remove_whitespace($data['phone']);
              $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkPhoneData));
              if (strtoupper($responseCheck->status_message) === 'OK') {
                $responseCheckData = json_decode($responseCheck->data);
                if ($responseCheckData->is_error == 0) {
                  if (!$responseCheckData->values) {
                    // if response has no values, this contact did not have a phone yet
                    $phoneChanged = true;
                  } else {
                    // this contact already had a phone
                    $oldPhone = reset($responseCheckData->values)->phone;
                    $oldPhone = _remove_whitespace($oldPhone);
                    if ($oldPhone != $checkPhoneData['phone']) {
                      // and the new one is different
                      $phoneChanged = true;
                    }
                  }
                } else {
                  $messages[] = ['text' => $responseCheckData->error_message];
                }
              } else {
                $messages[] = ['text' => 'There was some error checking the existence of the phone.'];
              }
            }

            if (!$isSorteigLlibresForm && !$isSorteigLlibresSmallForm && !$isConcursRelatJoveForm) {
              // check if not yet Activista
              $checkActivistaData = $postData;
              $checkActivistaData['entity'] = 'Membership';
              $checkActivistaData['action'] = 'get';
              $checkActivistaData['contact_id'] = $contactId;
              $checkActivistaData['membership_type_id'] = "Activista";
              $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkActivistaData));
              if (strtoupper($responseCheck->status_message) === 'OK') {
                $responseCheckData = json_decode($responseCheck->data);
                if ($responseCheckData->is_error == 0) {
                  if (!$responseCheckData->values) {
                    // if response has no values, this contact is not yet Activista
                    $activistaChanged = true;
                  }
                } else {
                  $messages[] = ['text' => $responseCheckData->error_message];
                }
              } else {
                $messages[] = ['text' => 'There was some error checking if contact is Activista.'];
              }

              // check if not yet Inscrit
              $checkInscritData = $postData;
              $checkInscritData['entity'] = 'Membership';
              $checkInscritData['action'] = 'get';
              $checkInscritData['contact_id'] = $contactId;
              $checkInscritData['membership_type_id'] = "Inscrit";
              $checkInscritData['status_id'] = ['IN' => ["Pending", "Current", "Verificat"]];
              $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkInscritData));
              if (strtoupper($responseCheck->status_message) === 'OK') {
                $responseCheckData = json_decode($responseCheck->data);
                if ($responseCheckData->is_error == 0) {
                  if (!$responseCheckData->values) {
                    // if response has no values, this contact is not yet Inscrit
                    $inscritChanged = true;
                  }
                } else {
                  $messages[] = ['text' => $responseCheckData->error_message];
                }
              } else {
                $messages[] = ['text' => 'There was some error checking if contact is Inscrit.'];
              }

              // check if not yet Seguidor
              $checkSeguidorData = $postData;
              $checkSeguidorData['entity'] = 'Membership';
              $checkSeguidorData['action'] = 'get';
              $checkSeguidorData['contact_id'] = $contactId;
              $checkSeguidorData['membership_type_id'] = "Seguidor";
              $responseCheck = drupal_http_request($apiConfig['endpoint'], _get_post_options($checkSeguidorData));
              if (strtoupper($responseCheck->status_message) === 'OK') {
                $responseCheckData = json_decode($responseCheck->data);
                if ($responseCheckData->is_error == 0) {
                  if (!$responseCheckData->values) {
                    // if response has no values, this contact is not yet Seguidor
                    $seguidorChanged = true;
                  }
                } else {
                  $messages[] = ['text' => $responseCheckData->error_message];
                }
              } else {
                $messages[] = ['text' => 'There was some error checking if contact is Seguidor.'];
              }
            }
          }
        }

        // --- Create contact request ---
        $createData = $postData;
        $createData['entity'] = 'Contact';
        $createData['action'] = 'create';
        $createData['contact_type'] = 'Individual';

        if (isset($contactId)) { // contact already existed
          $createData['id'] = $contactId;
        } else { // contact did not exist
          $createData['first_name'] = $data['firstname'];
          $createData['last_name'] = $data['lastname'];
        }

        // Source: Add the source ONLY if it was empty
        if (empty($oldContactData->contact_source)) {
          $source = 'contacte web';
          if ($form_id === $formIdsConfig['participa_form']) $source = 'participa web';
          else if ($form_id === $formIdsConfig['butlletins_form']) $source = 'butlletins web';
          else if ($isRendaBasicaForm) $source = 'renda basica web';
          else if ($isSorteigLlibresForm) $source = 'sorteig llibres 2021';
          else if ($isSorteigLlibresSmallForm) $source = 'sorteig llibres whatsapp';
          else if ($isConcursRelatJoveForm) $source = 'concurs relat jove';
          else if ($isEspaiJoveForm) $source = 'espai jove web';
          else if ($isCorRebelForm) $source = 'cor rebel web';
          $createData['source'] = $source;
        }

        // Tags: add new tag for the form's related campaign
        if ($isSorteigLlibresForm || $isSorteigLlibresSmallForm) {
          $createData['api.EntityTag.create'] = [
            'tag_id' => 93
          ];
        }
        if ($isConcursRelatJoveForm) {
          $createData['api.EntityTag.create'] = [
            'tag_id' => 97
          ];
        }
        if ($isEspaiJoveForm) {
          $createData['api.EntityTag.create'] = [
            'tag_id' => 102
          ];
        }
        if ($isCorRebelForm) {
          $createData['api.EntityTag.create'] = [
            'tag_id' => 104
          ];
        }

        // set preferred language
        $language = 'ca';
        $allowedLanguages = ['ca', 'es'];
        $submitted_url = explode('/', $data['submit_url']);
        if (isset($submitted_url[3])) {
          $language = $submitted_url[3];
          if (in_array($language, $allowedLanguages)) {
            $createData['preferred_language'] = $language . '_ES';
          }
        }

        if (!$isRendaBasicaForm) {
          // set newsletter subscriptions:
          $currentSubscriptions = [];
          if (!empty($oldContactData->custom_113)) {
            $currentSubscriptions = $oldContactData->custom_113;
          }
          $newSubscriptions = [];
          $languageIndex = array_search($language, $allowedLanguages);
          if (!_subscribed_already_to_newsletter($currentSubscriptions)) {
            if ($languageIndex !== false) {
              $newSubscriptions[] = $languageIndex + 1;
            }
          }
          // communication type checkboxes
          if (isset($data['communication_type'])) {
            if ($data['communication_type']['newsletter'] === 'newsletter' && !_subscribed_already_to_newsletter($currentSubscriptions)) {
              if ($languageIndex !== false) {
                $newSubscriptions[] = $languageIndex + 1;
              }
            }
            if ($data['communication_type']['press'] === 'press') {
              $newSubscriptions[] = 3;
            }
          }
          $finalSubscriptions = array_merge($currentSubscriptions, $newSubscriptions);
          $finalSubscriptions = array_unique($finalSubscriptions);
          if (!empty($finalSubscriptions)) {
            $createData['custom_113'] = $finalSubscriptions;
          }

          // set address data of type Altres
          if (isset($data['district'])) {
            if (!isset($contactId) || $addressChanged) {
              $newAddress = [
                'location_type_id' => 'Altres',
                'custom_118' => _remove_whitespace($data['district']),
              ];

              for ($i = 1; $i <= $maxDistricts; $i++) {
                $neighbourhood_key = 'neighbourhood_' . $i;
                if (isset($data[$neighbourhood_key])) {
                  $newAddress['custom_119'] = _remove_whitespace($data[$neighbourhood_key]);
                }
              }

              if ($isSorteigLlibresForm || $isConcursRelatJoveForm) {
                $newAddress['street_address'] = $data['street_line'];
                $newAddress['supplemental_address_1'] = $data['street_line2'];
                $newAddress['postal_code'] = $data['postalcode'];
              }

              $createData['api.Address.create'] = $newAddress;
            }
          }
        }

        // interests
        $currentInterests = [];
        if (!empty($oldContactData->custom_124)) {
          $currentInterests = $oldContactData->custom_124;
        }
        $newInterests = [];
        if (!$isSorteigLlibresForm) {
          if (!$isRendaBasicaForm) {
            $params = drupal_get_query_parameters();
            if (isset($params['interes'])) {
              $interest = intval($params['interes']);
              if (is_int($interest)) {
                $newInterests[] = $interest;
              }
            }
          } else {
            $newInterests[] = 11;
          }
        } else {
          if (isset($data['interests'])) {
            foreach ($data['interests'] as $key => $interest) {
              if (!empty($interest)) $newInterests[] = $key;
            } 
          }
        }
        
        $finalInterests = array_merge($currentInterests, $newInterests);
        $finalInterests = array_unique($finalInterests);
        if (!empty($finalInterests)) {
          $createData['custom_124'] = $finalInterests;
        }

        // memberships:
        if (!$isSorteigLlibresForm && !$isSorteigLlibresSmallForm && !$isConcursRelatJoveForm) {
          // if contact is not a duplicate or if its values/entities have changed, create them:
          // make Activista Interessat membership
          if (!isset($contactId) || $activistaChanged) {
            $createData['api.Membership.create'] = [
              'membership_type_id' => "Activista",
              'status_id' => "Interessat",
              'is_override' => 1
            ];
          }
          // make Inscrit pendent membership
          if (!isset($contactId) || $inscritChanged) {
            $createData['api.Membership.create.2'] = [
              'membership_type_id' => "Inscrit",
              'status_id' => "Pending",
              'is_override' => 1
            ];
          }
        }
        // Seguidor membership
        if (!isset($contactId) || $seguidorChanged) {
          if ($form_id !== $formIdsConfig['participa_form']) {
            if (!isset($contactId) || ($activistaChanged && $inscritChanged)) { // only set Seguidor if not Activista nor Inscrit
              $createData['api.Membership.create.3'] = [
                'membership_type_id' => "Seguidor",
                'status_id' => "Verificat",
                'is_override' => 1
              ];
            }
          }
        }

        // email: create email if new contact or if isSorteigLlibresForm/isConcursRelatJoveForm and email changed
        if (!isset($contactId) || (($isSorteigLlibresForm || $isConcursRelatJoveForm) && $emailChanged)) {
          $createData['api.Email.create'] = [
            'is_primary' => 1,
            'email' => $data['email'],
          ];
        }

        // phone
        if (isset($data['phone'])) {
          if (!isset($contactId) || $phoneChanged) {
            $createData['api.Phone.create'] = [
              'is_primary' => 1,
              'phone' => _remove_whitespace($data['phone']),
            ];
          }
        }

        // document type
        if (isset($data['document_type'])) {
          if (empty($oldContactData->custom_157)) {
            $createData['custom_157'] = _remove_whitespace($data['document_type']);
          }
        }
        
        // fiscal ID
        if (isset($data['document_num'])) {
          if (empty($oldContactData->custom_13)) {
            $createData['custom_13'] = _remove_whitespace($data['document_num']);
          }
        }

        // birth date
        if (isset($data['birthdate'])) {
          if (empty($oldContactData->birth_date)) {
            $createData['birth_date'] = $data['birthdate']['year'] . '-' . $data['birthdate']['month'] . '-' . $data['birthdate']['day'];
          }
        }

        // lives on house rent
        if (isset($data['house_rent'])) {
          if (empty($oldContactData->custom_158)) {
            $createData['custom_158'] = _remove_whitespace($data['house_rent']);
          }
        }

        // has children
        if (isset($data['have_children'])) {
          if (empty($oldContactData->custom_159)) {
            $createData['custom_159'] = _remove_whitespace($data['have_children']);
          }
        }

        // gender
        if (isset($data['gender'])) {
          if (empty($oldContactData->gender_id)) {
            $createData['gender_id'] = _remove_whitespace($data['gender']);
          }
        }

        // employment
        if (isset($data['employment'])) {
          if (empty($oldContactData->custom_187)) {
            $createData['custom_187'] = _remove_whitespace($data['employment']);
          }
        }

        // education
        if (isset($data['education'])) {
          if (empty($oldContactData->custom_188)) {
            $createData['custom_188'] = _remove_whitespace($data['education']);
          }
        }

        // make the final create request
        $response = drupal_http_request($apiConfig['endpoint'], _get_post_options($createData));

        if (strtoupper($response->status_message) === 'OK') {
          $responseData = json_decode($response->data);
          if ($responseData->is_error == 0) {
            // Contact created correctly
            $contactId = $responseData->id;
            $messages[] = ['text' => 'The Contact was sent and received correctly in the CIVI CRM.', 'severity' => WATCHDOG_INFO];

            // Send email if form is Participa
            if ($form_id === $formIdsConfig['participa_form']) {
              $emailKey = 'activista';
              if (is_null($data['participation_type']['activist'])) $emailKey = 'elcomu';
              drupal_mail('bcnencomu_civicrm', $emailKey, $data['email'], language_default());
            }

            // Now we'll assign the activities to this contact:
            $activityData = $postData;
            $activityData['entity'] = 'Activity';
            $activityData['action'] = 'create';
            $activityData['status_id'] = "Completed";
            $activityData['source_contact_id'] = $contactId;
            $activityData['target_contact_id'] = $contactId;

            // Update Communication Preferences
            $activityData['activity_type_id'] = "Update_Communication_Preferences";
            $responseActivity = drupal_http_request($apiConfig['endpoint'], _get_post_options($activityData));
            if (strtoupper($responseActivity->status_message) === 'OK') {
              $responseActivityData = json_decode($responseActivity->data);
              if ($responseActivityData->is_error == 0) {
                $messages[] = ['text' => 'Update_Communication_Preferences activity correctly created.', 'severity' => WATCHDOG_INFO];
              } else {
                $messages[] = ['text' => $responseActivityData->error_message];
              }
            } else {
              $messages[] = ['text' => 'There was some error creating the Update_Communication_Preferences activity.'];
            }

            // SLA Acceptance
            $activityData['activity_type_id'] = "SLA Acceptance";
            $responseActivity = drupal_http_request($apiConfig['endpoint'], _get_post_options($activityData));
            if (strtoupper($responseActivity->status_message) === 'OK') {
              $responseActivityData = json_decode($responseActivity->data);
              if ($responseActivityData->is_error == 0) {
                $messages[] = ['text' => 'SLA Acceptance activity correctly created.', 'severity' => WATCHDOG_INFO];
              } else {
                $messages[] = ['text' => $responseActivityData->error_message];
              }
            } else {
              $messages[] = ['text' => 'There was some error creating the SLA Acceptance activity.'];
            }
          } else {
            $messages[] = ['text' => $responseData->error_message];
          }
        } else {
          $messages[] = ['text' => 'There was some error in the creation of the contact.'];
        }
      } else {
        $messages[] = ['text' => $responseCheckData->error_message];
      }
    } else {
      $messages[] = ['text' => 'There was some error checking the possible duplicate of the contact.'];
    }
  } else {
    $messages[] = ['text' => 'The settings file is not properly configured, please read the README file in the module.'];
  }

  if (!empty($messages)) {
    foreach ($messages as $message) {
      $severity = WATCHDOG_ERROR;
      if (isset($message['severity'])) $severity = $message['severity'];
      watchdog(basename(__FILE__, '.module'), $message['text'], [], $severity);
    }
  }
}

/**
 * Implements hook_mail().
 */
function bcnencomu_civicrm_mail($key, &$message, $params)
{
  switch ($key) {
    case 'activista':
      $message['subject'] = 'Gràcies per inscriure’t a Barcelona En Comú';
      $message['body'][] = '
<p>Hola! </p>
<p>Gràcies per voler formar part de Barcelona En Comú. T’expliquem com i quins passos s’han
  de donar:</p>
<p>Si vols ser <strong><span style="color: #ff0000;">ACTIVISTA</span></strong>,
  només cal que vinguis a una de les <strong>trobades&nbsp;obertes de benvinguda per a nous activistes</strong> que
  fem periòdicament, on expliquem els espais de participació que existeixen en l’organització, les campanyes on pots
  col·laborar i les fites més importants per a la mobilització ciutadana. Aniràs rebent invitacions de sessions en
  el teu correu electrònic.</p>
<blockquote><p>Els activistes estan implicats en el
    dia a dia de l’organització i poden participar en els Plenaris de BComú i prendre part de les deliberacions i
    decisions més estratègiques i operatives de l’organització.</p></blockquote>
<p><br>A més, també pots ser&nbsp;<span style="color: #ff0000;"><strong>membre de EL COMÚ</strong></span>&nbsp;si
  vens a <strong>verificar la teva identitat presencialment</strong>, aportant el teu DNI/NIE/Passaport o algun
  document que acrediti la teva residència a Barcelona en el nostre local al carrer Marina, 131, baixos. De dilluns
  a divendres de 10 a 20h.</p>
<blockquote><p>El Comú és l’espai més ampli de BComú
    per poder participar en les grans decisions de l’organització i la ciutat: primàries a llistes electorals,
    acords de govern, programes electorals, etc. Com a mínim una vegada l’any es pot convocar una Assemblea del Comú
    i també altres tipus d’actes i activitats obertes en què poden participar.</p></blockquote>
<p><strong>Tenim més poder del que ens han fet creure!</strong></p>
';
      break;
    case 'elcomu':
      $message['subject'] = 'Gràcies per inscriure’t a Barcelona En Comú';
      $message['body'][] = '
<p>Hola!</p>
<p>Gràcies per voler estar inscrit i <strong>ser membre de El Comú</strong>, l’espai més ampli de Barcelona En Comú per poder participar en les grans decisions de l’organització i la ciutat: primàries a llistes electorals, acords de govern, programes electorals, etc. Com a mínim una vegada l’any es pot convocar una Assemblea del Comú i també altres tipus d’actes i activitats obertes en què poden participar.</p>
<p>Per inscriure-t’hi, has de venir a la nostra seu a <strong>verificar-te presencialment</strong>, aportant el teu DNI/NIE/Passaport o algun document que acrediti la teva residència a Barcelona:</p>
<blockquote><p><strong>Carrer Marina, 131 ( L1 Marina- L2 Monumental)</strong><br><strong>De dilluns a divendres de 10 a 20h</strong></p>
</blockquote><p>Benvingut/da i fins aviat!</p>
';
      break;

  }
}

/**
 * returns true if already subscribed to the generic newsletter (in any language: options 1 or 2)
 */
function _subscribed_already_to_newsletter($currentSubscriptions)
{
  $newsletterOptions = [1, 2];
  foreach ($newsletterOptions as $option) {
    if (in_array($option, $currentSubscriptions)) return true;
  }

  return false;
}

function _get_post_options($data)
{
  return [
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => http_build_query($data),
    'context' => stream_context_create(array(
      'ssl' => array(
        'verify_peer' => FALSE,
        'verify_depth' => 5,
        'allow_self_signed' => TRUE,
        'verify_peer_name' => FALSE,
      )
    ))
  ];
}

function _remove_whitespace($string)
{
  return preg_replace('/\s+/', '', $string);
}
