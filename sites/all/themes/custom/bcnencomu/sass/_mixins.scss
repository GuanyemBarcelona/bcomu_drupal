// @file
// Custom sass mixins

// a clearfix extension
%clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// to wrapperize content
%wrapper {
  margin: 0 auto;
  max-width: $page_inner_maxwidth;
}

// add horizontal air if screen is narrower than wrapper width
%below-wrapper-horizontal-air {
  @media screen and (max-width: $page_inner_maxwidth) {
    padding-left: $page_horizontal_padding;
    padding-right: $page_horizontal_padding;
  }
}

// a narrow body
%narrowbody {
  margin-left: auto;
  margin-right: auto;
  max-width: $body_width;
}

// a wider body
%widerbody {
  margin-left: auto;
  margin-right: auto;
  max-width: $multimedia_width;
}

// tag from a tags list
%tag {
  display: inline-block;
  height: 45px;
  margin: 0 20px 20px 0;
  a {
    display: inline-block;
    height: 100%;
    font-size: 180%;
    font-weight: 900;
    color: $theme_red;
    padding: 10px 12px;
    background: white;
    border: 2px solid $theme_red;
    transition: all 0.3s ease-in-out;
    &:hover,
    &.active {
      color: white;
      background: $theme_red;
    }
  }
}

// pager item
%pager__item {
  display: inline-block;
  font-size: 170%;
  text-align: center;
  list-style-type: none;
  background-image: none;
  a {
    display: block;
    padding: 5px;
    width: 100%;
    max-width: 400px;
    &:hover {
      text-decoration: underline;
    }
  }
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

/* The Simple Grid System */
@mixin simple-column-container {
  @extend %clearfix;
}
@mixin simple-column($column-count, $gutter-width) {
  float: left;
  width: ((100% - (($column-count - 1) * $gutter-width)) / $column-count);
  &:nth-child(n) {
    margin-right: $gutter-width;
  }
  &:nth-child(#{$column-count}n) {
    margin-right: 0;
  }
}

// hide the text
@mixin hide-text() {
  text-indent: -500em;
}

// one column-ize
@mixin one-columnize() {
  float: none;
  position: static;
  width: 100%;
  height: auto;
  padding-left: 0;
  padding-right: 0;
  left: auto;
  right: auto;
  top: auto;
  bottom: auto;
  clear: both;
  margin: 0 auto 20px;
}

// create inline list and separate by commas
@mixin separate-by-commas(){
  display: inline;
  &:after {
    content: ",";
    padding: 0 .2em 0 0;
  }
  &:last-child:after {
    content: "";
    padding: 0;
  }
}

// buttons
@mixin buttonize {
  display: inline-block;
  font-size: 180%;
  color: $theme_red;
  text-align: center;
  font-weight: bold;
  padding: 11px 12px 13px;
  background: white;
  border: 2px solid $theme_red;
  transition: all .3s ease;
  text-decoration: none;
  &:hover {
    background-color: $theme_red;
    color: white;
  }
}

// icons
@mixin iconize ($left: 0, $top: 0, $block_width: 1, $block_height: 1) {
  display: block;
  width: (25px * $block_width);
  height: (25px * $block_height);
  background: url("../img/sprite.png") no-repeat $left $top;
}
